using BLL.Facade; // Make sure this namespace is correct for your BLLFacade
using DomainModel;
using System;
using System.Collections.Generic;

namespace GeneradorDatosConsola // Or your preferred namespace
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Generando 10 equipos de prueba...");

            // 1. Team Names
            var nombresEquipos = new List<string>
            {
                "Los Cóndores", "Deportivo Boulogne", "Titanes FC", "Real Palermo",
                "Atlético del Norte", "Furia Roja", "Club Centenario",
                "Estrellas Unidas", "Guerreros del Sur", "La Academia FC"
            };

            // 2. Captain IDs (matching the order of your provided client list)
            var idsCapitanes = new List<Guid>
            {
                Guid.Parse("CCB8CC66-12EE-48CC-8084-12FDCF65E41F"), // Luis Rodriguez
                Guid.Parse("79416E41-678D-4262-9FEF-17E55CBAFC1B"), // Jorge Fernandez
                Guid.Parse("9E9326B5-B5A7-40A1-805C-584F20B437DD"), // Sofia Gomez
                Guid.Parse("A4E10CC9-6156-4353-9E20-784C7CC59549"), // Maria Garcia
                Guid.Parse("983527D1-CFBE-44C6-8ED5-B153BCFAB1F7"), // Elena Torres
                Guid.Parse("49331B69-D816-4852-904B-B73E7B478C8F"), // Laura Sanchez
                Guid.Parse("9BCCDC0E-45EE-4670-97DB-BA5DC6E13CD0"), // Ricardo Diaz
                Guid.Parse("B7895640-B3B6-49E8-8F3B-BF93DC8B6E87"), // Carlos Lopez
                Guid.Parse("08DF1866-AAC2-4C53-9FEA-DEC35A4604FF"), // Ana Martinez
                Guid.Parse("9C0E1F04-B0D9-4D86-99F3-FBDC1FF62521")  // Juan Perez
            };

            // Ensure we have data for all teams
            if (nombresEquipos.Count != idsCapitanes.Count)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error: La cantidad de nombres de equipo no coincide con la cantidad de IDs de capitán.");
                Console.ResetColor();
                Console.ReadKey();
                return;
            }

            int creados = 0;
            for (int i = 0; i < nombresEquipos.Count; i++)
            {
                string nombreEquipo = nombresEquipos[i];
                Guid idCapitan = idsCapitanes[i];

                try
                {
                    // 3. Create the Equipo object
                    var nuevoEquipo = new Equipo
                    {
                        // IdEquipo will be generated by BLL/DAL
                        Nombre = nombreEquipo,
                        // Create a "stub" Client object with only the ID for the Captain
                        Capitan = new Cliente { IdCliente = idCapitan },
                        // BLL/DAL should handle defaults for:
                        // FechaCreacion, CantAusencias, EstadoProxPartido, Habilitado, Jugadores list
                    };

                    // 4. Call the BLL Facade to create the team
                    //    (This assumes EquipoService.Crear handles setting defaults and generating ID)
                    BLLFacade.Current.EquipoService.Crear(nuevoEquipo);

                    Console.WriteLine($"- Equipo '{nombreEquipo}' creado con éxito.");
                    creados++;
                }
                catch (InvalidOperationException opEx) // Catch specific business rule errors
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine($"* ADVERTENCIA al crear '{nombreEquipo}': {opEx.Message}");
                    Console.ResetColor();
                }
                catch (Exception ex) // Catch other unexpected errors
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"! ERROR al crear '{nombreEquipo}': {ex.Message}");
                    Console.ResetColor();
                }
            }

            Console.WriteLine($"\nProceso finalizado. Equipos creados: {creados} de {nombresEquipos.Count}.");
            Console.WriteLine("Presiona cualquier tecla para salir...");
            Console.ReadKey();
        }
        

        static void AgregarTestClientes()
        {
            Console.WriteLine("Generando 10 clientes de prueba...");

            // Sample data - Ensure phone numbers are unique if required by your logic
            var clientesPrueba = new List<(string Nombre, string Telefono)>
            {
                ("Juan Perez", "1122334450"),
                ("Maria Garcia", "1122334451"),
                ("Carlos Lopez", "1122334452"),
                ("Ana Martinez", "1122334453"),
                ("Luis Rodriguez", "1122334454"),
                ("Laura Sanchez", "1122334455"),
                ("Jorge Fernandez", "1122334456"),
                ("Sofia Gomez", "1122334457"),
                ("Ricardo Diaz", "1122334458"),
                ("Elena Torres", "1122334459")
            };

            int creados = 0;
            foreach (var data in clientesPrueba)
            {
                try
                {
                    // 1. Create the Client object
                    var nuevoCliente = new Cliente
                    {
                        // The BLL/DAL should handle generating the Guid
                        // IdCliente = Guid.NewGuid(), // Let the system generate it
                        Nombre = data.Nombre,
                        Telefono = data.Telefono
                    };

                    // 2. Call the BLL Facade to add the client
                    BLLFacade.Current.ClienteService.Add(nuevoCliente);

                    Console.WriteLine($"- Cliente '{data.Nombre}' creado con éxito.");
                    creados++;
                }
                catch (InvalidOperationException opEx) // Catch specific business rule errors (like duplicate phone)
                {
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine($"* ADVERTENCIA al crear '{data.Nombre}': {opEx.Message}");
                    Console.ResetColor();
                }
                catch (Exception ex) // Catch other unexpected errors
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"! ERROR al crear '{data.Nombre}': {ex.Message}");
                    Console.ResetColor();
                    // Optionally, stop the process if a critical error occurs
                    // break;
                }
            }

            Console.WriteLine($"\nProceso finalizado. Clientes creados: {creados} de {clientesPrueba.Count}.");
            Console.WriteLine("Presiona cualquier tecla para salir...");
            Console.ReadKey();
        }
    }
}